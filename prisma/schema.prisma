generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Student-specific relations
  quizAttempts       QuizAttempt[]
  bookmarks          Bookmark[]
  progress           Progress[]
  accessibleSections SectionAccess[]

  @@map("users")
}

model Department {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]

  @@map("departments")
}

model Course {
  id           String   @id @default(cuid())
  name         String
  code         String
  description  String?
  departmentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  classes    Class[]

  @@unique([code, departmentId])
  @@map("courses")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  code        String
  description String?
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sections Section[]

  @@unique([code, courseId])
  @@map("classes")
}

model Section {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  classId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  class     Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  questions Question[]
  quizzes   Quiz[]
  access    SectionAccess[]
  progress  Progress[]

  @@map("sections")
}

model SectionAccess {
  id        String @id @default(cuid())
  userId    String
  sectionId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([userId, sectionId])
  @@map("section_access")
}

model Question {
  id            String       @id @default(cuid())
  content       String
  type          QuestionType
  options       Json? // For multiple choice questions
  correctAnswer String
  explanation   String?
  difficulty    Difficulty   @default(MEDIUM)
  sectionId     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  section        Section         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  quizQuestions  QuizQuestion[]
  bookmarks      Bookmark[]
  answerAttempts AnswerAttempt[]

  @@map("questions")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  timeLimit   Int? // in minutes
  isActive    Boolean  @default(true)
  sectionId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  section   Section        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id         String @id @default(cuid())
  quizId     String
  questionId String
  order      Int

  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([quizId, questionId])
  @@map("quiz_questions")
}

model QuizAttempt {
  id             String   @id @default(cuid())
  userId         String
  quizId         String
  score          Float
  totalQuestions Int
  correctAnswers Int
  timeSpent      Int? // in seconds
  completedAt    DateTime @default(now())

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz    Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id            String  @id @default(cuid())
  quizAttemptId String
  questionId    String
  userAnswer    String
  isCorrect     Boolean
  timeSpent     Int? // in seconds

  quizAttempt QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question    Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([quizAttemptId, questionId])
  @@map("answer_attempts")
}

model Bookmark {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@map("bookmarks")
}

model Progress {
  id               String   @id @default(cuid())
  userId           String
  sectionId        String
  questionsStudied Int      @default(0)
  quizzesTaken     Int      @default(0)
  averageScore     Float?
  lastAccessedAt   DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([userId, sectionId])
  @@map("progress")
}

enum Role {
  ADMIN
  STUDENT
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
